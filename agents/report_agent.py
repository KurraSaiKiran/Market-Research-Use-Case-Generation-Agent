import os
from datetime import datetime
from typing import Dict, List

class ReportAgent:
    def generate_report(self, query: str, research_data: Dict, use_cases: List[Dict], resources: Dict, bonus_solutions: Dict = None) -> str:
        """Generate final markdown report"""
        
        report = f"""# ðŸ¤– AI/GenAI Market Research Report

**Query:** {query}  
**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**Analysis Type:** Multi-Agent Research System

---

## ðŸ“Š Agent 1: Industry/Company Research

### Industry Classification
**Industry:** {research_data.get('industry', 'N/A')}  
**Market Size:** {research_data.get('market_size', 'Multi-billion dollar market')}

### Company Offerings
{self._format_list(research_data.get('company_offerings', ['Core business solutions']))}

### Strategic Focus Areas
{self._format_list(research_data.get('focus_areas', []))}

### Competitors & Market Trends
**Key Competitors:**
{self._format_list(research_data.get('competitors', []))}

**Market Trends:**
{self._format_list(research_data.get('market_trends', ['AI adoption', 'Digital transformation']))}

---

## ðŸ’¡ Agent 2: AI/GenAI Use Case Proposals

"""
        
        for i, use_case in enumerate(use_cases, 1):
            report += f"""### {i}. {use_case['name']}

**Description:** {use_case['description']}  
**Business Value:** {use_case['value']}  
**Industry Alignment:** Supported by current AI adoption trends

"""
        
        report += f"""---

## ðŸ“š Agent 3: Datasets & Resource Assets

"""
        
        for use_case_name, case_resources in resources.items():
            if case_resources:
                report += f"""### Resources for {use_case_name}

"""
                for resource in case_resources:
                    report += f"- **[{resource['name']}]({resource['url']})** - {resource['type']}  \n  *{resource.get('description', 'No description available')}*\n\n"
        
        if bonus_solutions:
            report += f"""---

## âœ¨ Agent 4: Bonus GenAI Solutions

### Internal-Facing Solutions

"""
            for solution in bonus_solutions.get('internal_solutions', []):
                report += f"""#### {solution['name']}
**Description:** {solution['description']}  
**Business Value:** {solution['value']}  
**Implementation:** {solution['implementation']}

"""
            
            report += f"""### Customer-Facing Solutions

"""
            for solution in bonus_solutions.get('customer_solutions', []):
                report += f"""#### {solution['name']}
**Description:** {solution['description']}  
**Business Value:** {solution['value']}  
**Implementation:** {solution['implementation']}

"""
            
            report += f"""### Implementation Roadmap

"""
            for phase in bonus_solutions.get('implementation_roadmap', []):
                report += f"- **{phase['phase']}:** {phase['focus']} - {phase['deliverables']}\n"
            
            report += f"""\n### ROI Estimates

- **Cost Savings:** {bonus_solutions.get('roi_estimates', {}).get('cost_savings', 'TBD')}  
- **Revenue Impact:** {bonus_solutions.get('roi_estimates', {}).get('revenue_impact', 'TBD')}  
- **Efficiency Gains:** {bonus_solutions.get('roi_estimates', {}).get('efficiency_gains', 'TBD')}  
- **Payback Period:** {bonus_solutions.get('roi_estimates', {}).get('payback_period', 'TBD')}

"""
        
        total_resources = sum(len(r) for r in resources.values())
        bonus_count = len(bonus_solutions.get('internal_solutions', [])) + len(bonus_solutions.get('customer_solutions', [])) if bonus_solutions else 0
        
        report += f"""---

## ðŸ“ˆ Executive Summary

### Key Findings
- **Industry Analysis:** Comprehensive research of {research_data.get('industry', 'target industry')}
- **Use Cases Identified:** {len(use_cases)} AI/GenAI implementation opportunities
- **Resources Mapped:** {total_resources} datasets, models, and repositories
- **Bonus Solutions:** {bonus_count} additional GenAI opportunities identified

### Strategic Recommendations
1. **Immediate Focus:** Prioritize use cases with highest ROI potential
2. **Resource Allocation:** Leverage identified datasets for rapid prototyping
3. **Implementation Strategy:** Follow phased approach starting with internal solutions
4. **Success Metrics:** Track efficiency gains, cost savings, and customer satisfaction

### Next Steps
1. Conduct detailed feasibility analysis for top 3 use cases
2. Secure necessary datasets and development resources
3. Establish AI governance framework and success metrics
4. Begin pilot implementation with internal-facing solutions
5. Scale successful pilots to customer-facing applications

---

*ðŸ¤– Report generated by Multi-Agent AI Research System*  
*Agents: Research â†’ Use Case â†’ Resource â†’ Bonus Solutions*
"""
        
        return report
    
    def _format_list(self, items: List[str]) -> str:
        if not items:
            return "- Information available via detailed research\n"
        return "\n".join([f"- {item}" for item in items]) + "\n"
    
    def save_report(self, report: str, filename: str = None) -> str:
        """Save report to file"""
        if not filename:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"ai_research_report_{timestamp}.md"
        
        filepath = os.path.join("reports", filename)
        os.makedirs("reports", exist_ok=True)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(report)
            
        return filepath
    
    def export_pdf(self, report: str, filename: str = None) -> str:
        """Export report as PDF"""
        try:
            from reportlab.lib.pagesizes import letter
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
            from reportlab.lib.styles import getSampleStyleSheet
            
            if not filename:
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                filename = f"ai_research_report_{timestamp}.pdf"
            
            filepath = os.path.join("reports", filename)
            os.makedirs("reports", exist_ok=True)
            
            doc = SimpleDocTemplate(filepath, pagesize=letter)
            styles = getSampleStyleSheet()
            story = []
            
            # Convert markdown to simple text for PDF
            lines = report.split('\n')
            for line in lines:
                if line.startswith('# '):
                    story.append(Paragraph(line[2:], styles['Title']))
                elif line.startswith('## '):
                    story.append(Paragraph(line[3:], styles['Heading1']))
                elif line.startswith('### '):
                    story.append(Paragraph(line[4:], styles['Heading2']))
                elif line.strip():
                    story.append(Paragraph(line, styles['Normal']))
                story.append(Spacer(1, 6))
            
            doc.build(story)
            return filepath
            
        except ImportError:
            return "PDF export requires reportlab package"